name: deploy-frontends-to-staging

on:
  pull_request:
    branches: 
      - staging

jobs:
  image-tag:
    name: create image tag
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.prep.outputs.build_id }} # build id
      datetime: ${{ steps.prep.outputs.datetime }} # build date
    steps:
      - name: generate build ID
        id: prep
        run: |
            sha=${GITHUB_SHA::8}
            timestamp=$(date +%s)
            datetime=$(date)
            echo "::set-output name=build_id::stage-${sha}-${timestamp}"
            echo "::set-output name=datetime::${datetime}"

  branch-name:
    name: Format branch name string
    runs-on: ubuntu-latest
    outputs:
      lowercase: ${{ steps.string.outputs.lowercase }} # lowercase version
    steps:
      - id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.head_ref || github.ref_name }}

  ### deploy website ###
  website:
    name: build-push-deploy-website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}'
          
      - name: Setup Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Create google_application_credentials.json file
        id: create-google-application-credentials-file
        uses: jsdaniell/create-json@1.1.2
        # Backup for this action: airqo-platform/create-json@1.1.2
        with:
          name: "google_application_credentials.json"
          json: ${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}
          dir: 'website/'

      - name: Create app.yaml and .env.yaml files
        run: |
          cd website/
          echo "========== Creating app.yaml file =========="          
          echo "runtime: python" > app.yaml
          echo "env: flex" >> app.yaml
          echo "service: staging" >> app.yaml
          echo "includes:" >> app.yaml
          echo "  - .env.yaml" >> app.yaml
          echo "========== Creating .env.yaml file =========="  
          echo "env_variables:" > .env.yaml
          echo "  SECRET: ${{ secrets.WEBSITE_SECRET }}" >> .env.yaml
          echo "  CLOUDINARY_KEY: ${{ secrets.WEBSITE_CLOUDINARY_KEY }}" >> .env.yaml
          echo "  CLOUDINARY_NAME: ${{ secrets.WEBSITE_CLOUDINARY_NAME }}" >> .env.yaml
          echo "  CLOUDINARY_SECRET: ${{ secrets.WEBSITE_CLOUDINARY_SECRET }}" >> .env.yaml
          echo "  DATABASE_URI: ${{ secrets.WEBSITE_STAGE_DATABASE_URI }}" >> .env.yaml
          echo "  GS_BUCKET_NAME: ${{ secrets.WEBSITE_STAGE_GS_BUCKET_NAME }}" >> .env.yaml
          echo "  REACT_WEB_STATIC_HOST: ${{ secrets.WEBSITE_STAGE_REACT_WEB_STATIC_HOST }}" >> .env.yaml
          echo "  SECRET_KEY: ${{ secrets.WEBSITE_STAGE_SECRET_KEY }}" >> .env.yaml
          echo "  REACT_NETMANAGER_BASE_URL: ${{ secrets.WEBSITE_STAGE_REACT_NETMANAGER_BASE_URL }}" >> .env.yaml
          echo "  REACT_APP_BASE_AIRQLOUDS_URL: ${{ secrets.WEBSITE_REACT_APP_BASE_AIRQLOUDS_URL }}" >> .env.yaml
          echo "  REACT_APP_BASE_NEWSLETTER_URL: ${{ secrets.WEBSITE_REACT_APP_BASE_NEWSLETTER_URL }}" >> .env.yaml
          echo "  DJANGO_ALLOWED_HOSTS: ${{ secrets.WEBSITE_DJANGO_ALLOWED_HOSTS }}" >> .env.yaml
          echo "  DEBUG: False" >> .env.yaml
          echo "  GOOGLE_APPLICATION_CREDENTIALS: /app/google_application_credentials.json" >> .env.yaml
          echo "  REACT_APP_WEBSITE_BASE_URL: ${{ secrets.WEBSITE_STAGE_REACT_APP_WEBSITE_BASE_URL }}" >> .env.yaml
        
      - name: Build and Push Docker Image
        run: |
          cd website/
          docker build . \
          --build-arg REACT_WEB_STATIC_HOST=${{ secrets.WEBSITE_STAGE_REACT_WEB_STATIC_HOST }} \
          --build-arg REACT_NETMANAGER_BASE_URL=${{ secrets.WEBSITE_STAGE_REACT_NETMANAGER_BASE_URL }} \
          --build-arg REACT_APP_BASE_AIRQLOUDS_URL=${{ secrets.WEBSITE_REACT_APP_BASE_AIRQLOUDS_URL }} \
          --build-arg REACT_APP_BASE_NEWSLETTER_URL=${{ secrets.WEBSITE_REACT_APP_BASE_NEWSLETTER_URL }} \
          --build-arg REACT_APP_WEBSITE_BASE_URL=${{ secrets.WEBSITE_STAGE_REACT_APP_WEBSITE_BASE_URL }} \
          --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }}
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest

      - name: Deploy to App Engine
        run: |-
          cd website/
          gcloud app deploy  \
            --image-url=${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest \
            --project=${{ secrets.FRONTEND_PROJECT_ID }} \
            --quiet
