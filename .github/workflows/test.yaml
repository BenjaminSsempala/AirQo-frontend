name: test

on:
  pull_request:
    branches: 
      - staging

jobs:
  image-tag:
    name: create image tag
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.prep.outputs.build_id }} # build id
      datetime: ${{ steps.prep.outputs.datetime }} # build date
    steps:
      - name: generate build ID
        id: prep
        run: |
            sha=${GITHUB_SHA::8}
            timestamp=$(date +%s)
            datetime=$(date)
            echo "::set-output name=build_id::stage-${sha}-${timestamp}"
            echo "::set-output name=datetime::${datetime}"

  ### deploy website ###
  website:
    name: build-push-deploy-website
    needs: [image-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: '${{ secrets.GCP_FRONTEND_PROJECT_SA_CREDENTIALS }}'
          
      - name: Setup Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Create required files
        run: |
          cd website/
          echo ${{ secrets.GCP_SA_CREDENTIALS }} > google_application_credentials.json
          echo 'env_variables:' > .env.yaml
          echo '  SECRET: ${{ secrets.WEBSITE_SECRET }}' >> .env.yaml
          echo '  CLOUDINARY_KEY: ${{ secrets.WEBSITE_CLOUDINARY_KEY }}' >> .env.yaml
          echo '  CLOUDINARY_NAME: ${{ secrets.WEBSITE_CLOUDINARY_NAME }}' >> .env.yaml
          echo '  CLOUDINARY_SECRET: ${{ secrets.WEBSITE_CLOUDINARY_SECRET }}' >> .env.yaml
          echo '  DATABASE_URI: ${{ secrets.WEBSITE_STAGE_DATABASE_URI }}' >> .env.yaml
          echo '  GS_BUCKET_NAME: ${{ secrets.WEBSITE_STAGE_GS_BUCKET_NAME }}' >> .env.yaml
          echo '  REACT_WEB_STATIC_HOST: ${{ secrets.WEBSITE_STAGE_REACT_WEB_STATIC_HOST }}' >> .env.yaml
          echo '  SECRET_KEY: ${{ secrets.WEBSITE_STAGE_SECRET_KEY }}' >> .env.yaml
          echo '  REACT_NETMANAGER_BASE_URL: ${{ secrets.WEBSITE_STAGE_REACT_NETMANAGER_BASE_URL }}' >> .env.yaml
          echo '  REACT_APP_BASE_AIRQLOUDS_URL: ${{ secrets.WEBSITE_REACT_APP_BASE_AIRQLOUDS_URL }}' >> .env.yaml
          echo '  REACT_APP_BASE_NEWSLETTER_URL: ${{ secrets.WEBSITE_REACT_APP_BASE_NEWSLETTER_URL }}' >> .env.yaml
          echo '  DJANGO_ALLOWED_HOSTS: ${{ secrets.WEBSITE_DJANGO_ALLOWED_HOSTS }}' >> .env.yaml
          echo '  DEBUG: False' >> .env.yaml
          echo '  GOOGLE_APPLICATION_CREDENTIALS: /app/google_application_credentials.json' >> .env.yaml
        
      - name: Build and Push Docker Image
        run: |
          cd website/
          docker build \
          --build-arg REACT_WEB_STATIC_HOST=${{ secrets.WEBSITE_STAGE_REACT_WEB_STATIC_HOST }} \
          --build-arg REACT_NETMANAGER_BASE_URL=${{ secrets.WEBSITE_STAGE_REACT_NETMANAGER_BASE_URL }} \
          --build-arg REACT_APP_BASE_AIRQLOUDS_URL=${{ secrets.WEBSITE_REACT_APP_BASE_AIRQLOUDS_URL }} \
          --build-arg REACT_APP_BASE_NEWSLETTER_URL=${{ secrets.WEBSITE_REACT_APP_BASE_NEWSLETTER_URL }} \
          --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }} \
          -f docker/Dockerfile .
          docker tag ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }} ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:${{ needs.image-tag.outputs.build_id }}
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest

      - name: Deploy to App Engine
        run: |-
          gcloud app deploy  \
            --image-url=${{ secrets.REGISTRY_URL }}/${{ secrets.FRONTEND_PROJECT_ID }}/airqo-stage-website:latest \
            --project=${{ secrets.FRONTEND_PROJECT_ID }}
